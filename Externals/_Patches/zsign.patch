diff --git a/common/common.cpp b/common/common.cpp
index b25dadc..645084c 100644
--- a/common/common.cpp
+++ b/common/common.cpp
@@ -694,6 +694,7 @@ uint64_t ZTimer::PrintResult(bool bSuccess, const char *szFormatArgs, ...)
 }
 
 int ZLog::g_nLogLevel = ZLog::E_INFO;
+function<void(string)> ZLog::g_callback = NULL;
 
 void ZLog::SetLogLever(int nLogLevel)
 {
@@ -705,6 +706,7 @@ void ZLog::Print(int nLevel, const char *szLog)
 	if (g_nLogLevel >= nLevel)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -714,6 +716,7 @@ void ZLog::PrintV(int nLevel, const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -722,6 +725,7 @@ bool ZLog::Error(const char *szLog)
 	write(STDOUT_FILENO, "\033[31m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -731,6 +735,7 @@ bool ZLog::ErrorV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[31m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -739,6 +744,7 @@ bool ZLog::Success(const char *szLog)
 	write(STDOUT_FILENO, "\033[32m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return true;
 }
 
@@ -748,6 +754,7 @@ bool ZLog::SuccessV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[32m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return true;
 }
 
@@ -767,6 +774,7 @@ bool ZLog::Warn(const char *szLog)
 	write(STDOUT_FILENO, "\033[33m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -776,6 +784,7 @@ bool ZLog::WarnV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[33m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -784,6 +793,7 @@ void ZLog::Print(const char *szLog)
 	if (g_nLogLevel >= E_INFO)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -793,6 +803,7 @@ void ZLog::PrintV(const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -801,6 +812,7 @@ void ZLog::Debug(const char *szLog)
 	if (g_nLogLevel >= E_DEBUG)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -810,6 +822,7 @@ void ZLog::DebugV(const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
diff --git a/common/common.h b/common/common.h
index 0e1592b..fa41e6f 100644
--- a/common/common.h
+++ b/common/common.h
@@ -4,7 +4,13 @@
 #include <stdio.h>
 #include <stdint.h>
 #include <stdarg.h>
-#include <sys/mman.h>
+#ifdef WIN32
+    #include "win32/mman.h"
+    #include "win32/dirent.h"
+#else
+    #include <sys/mman.h>
+    #include <dirent.h>
+#endif
 #include <errno.h>
 #include <unistd.h>
 #include <fcntl.h>
@@ -14,7 +20,6 @@
 #include <ftw.h>
 #include <math.h>
 #include <assert.h>
-#include <dirent.h>
 #include <sys/stat.h>
 #include <sys/time.h>
 #include <sys/types.h>
@@ -24,6 +29,7 @@
 #include <vector>
 #include <string>
 #include <iostream>
+#include <functional>
 using namespace std;
 
 #define LE(x) _Swap(x)
@@ -138,6 +144,7 @@ public:
     };
 
 public:
+    static function<void(string)> g_callback;
     static bool IsDebug();
     static void Print(const char *szLog);
     static void PrintV(const char *szFormatArgs, ...);
diff --git a/openssl.cpp b/openssl.cpp
index 2f7e86c..fe77759 100644
--- a/openssl.cpp
+++ b/openssl.cpp
@@ -695,6 +695,12 @@ bool ZSignAsset::Init(const string &strSignerCertFile, const string &strSignerPK
 			{
 				BIO_reset(bioPKey);
 				PKCS12 *p12 = d2i_PKCS12_bio(bioPKey, NULL);
+				if (!p12)
+				{
+					FILE *p12_file = fopen(strSignerPKeyFile.c_str(), "rb");
+					d2i_PKCS12_fp(p12_file, &p12);
+					fclose(p12_file);
+				}
 				if (NULL != p12)
 				{
 					if (0 == PKCS12_parse(p12, strPassword.c_str(), &evpPKey, &x509Cert, NULL))
