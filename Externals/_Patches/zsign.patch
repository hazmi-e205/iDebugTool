diff --git a/bundle.cpp b/bundle.cpp
index 337750b..bfaf48d 100644
--- a/bundle.cpp
+++ b/bundle.cpp
@@ -7,6 +7,7 @@
 
 ZAppBundle::ZAppBundle()
 {
+    m_pSignAssets = NULL;
 	m_pSignAsset = NULL;
 	m_bForceSign = false;
 	m_bWeakInject = false;
@@ -376,6 +377,36 @@ bool ZAppBundle::SignNode(JValue &jvNode)
 		return false;
 	}
 
+    if (m_pSignAssets)
+    {
+        for (std::list<ZSignAsset>::reverse_iterator it = (*m_pSignAssets).rbegin(); it != (*m_pSignAssets).rend(); ++it)
+        {
+            m_pSignAsset = &(*it);
+            string frontstr = m_pSignAsset->m_strTeamId + ".";
+            string provisionBundleId = m_pSignAsset->m_strApplicationId;
+            provisionBundleId = provisionBundleId.erase(0, frontstr.length());
+
+            if (!strBundleId.empty() && !provisionBundleId.empty())
+            {
+                if (provisionBundleId.ends_with('*')){
+                    provisionBundleId = provisionBundleId.erase(provisionBundleId.find('*'), 1);
+                    if (!strBundleId.starts_with(provisionBundleId))
+                        continue; //wildcard not match
+                }
+                else if (strBundleId != provisionBundleId) {
+                    continue; //bundle id not match
+                }
+
+                if (!WriteFile(m_pSignAsset->m_strProvisionData, "%s/embedded.mobileprovision", strBaseFolder.c_str()))
+                {   //embedded.mobileprovision
+                    ZLog::ErrorV(">>> Can't Write embedded.mobileprovision!\n");
+                    return false;
+                }
+                break;
+            }
+        }
+    }
+
 	CreateFolderV("%s/_CodeSignature", strBaseFolder.c_str());
 	string strCodeResFile = strBaseFolder + "/_CodeSignature/CodeResources";
 
@@ -595,12 +626,6 @@ bool ZAppBundle::SignFolder(ZSignAsset *pSignAsset,
 		}
 	}
 
-	if (!WriteFile(pSignAsset->m_strProvisionData, "%s/embedded.mobileprovision", m_strAppFolder.c_str()))
-	{ //embedded.mobileprovision
-		ZLog::ErrorV(">>> Can't Write embedded.mobileprovision!\n");
-		return false;
-	}
-
 	if (!strDyLibFile.empty())
 	{ //inject dylib
 		string strDyLibData;
@@ -663,3 +688,17 @@ bool ZAppBundle::SignFolder(ZSignAsset *pSignAsset,
 
 	return false;
 }
+
+bool ZAppBundle::SignFolder(std::list<ZSignAsset> *pSignAssets
+                            , const string &strFolder
+                            , const string &strBundleID
+                            , const string &strBundleVersion
+                            , const string &strDisplayName
+                            , const string &strDyLibFile
+                            , bool bForce
+                            , bool bWeakInject
+                            , bool bEnableCache)
+{
+    m_pSignAssets = pSignAssets;
+    return SignFolder(&m_pSignAssets->front(), strFolder, strBundleID, strBundleVersion, strDisplayName, strDyLibFile, bForce, bWeakInject, bEnableCache);
+}
diff --git a/bundle.h b/bundle.h
index b082eb7..4e2194c 100644
--- a/bundle.h
+++ b/bundle.h
@@ -2,6 +2,7 @@
 #include "common/common.h"
 #include "common/json.h"
 #include "openssl.h"
+#include <list>
 
 class ZAppBundle
 {
@@ -10,6 +11,7 @@ public:
 
 public:
 	bool SignFolder(ZSignAsset *pSignAsset, const string &strFolder, const string &strBundleID, const string &strBundleVersion, const string &strDisplayName, const string &strDyLibFile, bool bForce, bool bWeakInject, bool bEnableCache);
+    bool SignFolder(std::list<ZSignAsset> *pSignAssets, const string &strFolder, const string &strBundleID, const string &strBundleVersion, const string &strDisplayName, const string &strDyLibFile, bool bForce, bool bWeakInject, bool bEnableCache);
 
 private:
 	bool SignNode(JValue &jvNode);
@@ -31,6 +33,7 @@ private:
 	bool m_bWeakInject;
 	string m_strDyLibPath;
 	ZSignAsset *m_pSignAsset;
+    list<ZSignAsset> *m_pSignAssets;
 
 public:
 	string m_strAppFolder;
diff --git a/common/common.cpp b/common/common.cpp
index b25dadc..645084c 100644
--- a/common/common.cpp
+++ b/common/common.cpp
@@ -694,6 +694,7 @@ uint64_t ZTimer::PrintResult(bool bSuccess, const char *szFormatArgs, ...)
 }
 
 int ZLog::g_nLogLevel = ZLog::E_INFO;
+function<void(string)> ZLog::g_callback = NULL;
 
 void ZLog::SetLogLever(int nLogLevel)
 {
@@ -705,6 +706,7 @@ void ZLog::Print(int nLevel, const char *szLog)
 	if (g_nLogLevel >= nLevel)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -714,6 +716,7 @@ void ZLog::PrintV(int nLevel, const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -722,6 +725,7 @@ bool ZLog::Error(const char *szLog)
 	write(STDOUT_FILENO, "\033[31m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -731,6 +735,7 @@ bool ZLog::ErrorV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[31m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -739,6 +744,7 @@ bool ZLog::Success(const char *szLog)
 	write(STDOUT_FILENO, "\033[32m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return true;
 }
 
@@ -748,6 +754,7 @@ bool ZLog::SuccessV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[32m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return true;
 }
 
@@ -767,6 +774,7 @@ bool ZLog::Warn(const char *szLog)
 	write(STDOUT_FILENO, "\033[33m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -776,6 +784,7 @@ bool ZLog::WarnV(const char *szFormatArgs, ...)
 	write(STDOUT_FILENO, "\033[33m", 5);
 	write(STDOUT_FILENO, szLog, strlen(szLog));
 	write(STDOUT_FILENO, "\033[0m", 4);
+    if (g_callback) g_callback(szLog);
 	return false;
 }
 
@@ -784,6 +793,7 @@ void ZLog::Print(const char *szLog)
 	if (g_nLogLevel >= E_INFO)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -793,6 +803,7 @@ void ZLog::PrintV(const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -801,6 +812,7 @@ void ZLog::Debug(const char *szLog)
 	if (g_nLogLevel >= E_DEBUG)
 	{
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
@@ -810,6 +822,7 @@ void ZLog::DebugV(const char *szFormatArgs, ...)
 	{
 		PARSEVALIST(szFormatArgs, szLog)
 		write(STDOUT_FILENO, szLog, strlen(szLog));
+        if (g_callback) g_callback(szLog);
 	}
 }
 
diff --git a/common/common.h b/common/common.h
index 0e1592b..211525b 100644
--- a/common/common.h
+++ b/common/common.h
@@ -24,6 +24,7 @@
 #include <vector>
 #include <string>
 #include <iostream>
+#include <functional>
 using namespace std;
 
 #define LE(x) _Swap(x)
@@ -138,6 +139,7 @@ public:
     };
 
 public:
+    static function<void(string)> g_callback;
     static bool IsDebug();
     static void Print(const char *szLog);
     static void PrintV(const char *szFormatArgs, ...);
diff --git a/openssl.cpp b/openssl.cpp
index 2f7e86c..c736ea6 100644
--- a/openssl.cpp
+++ b/openssl.cpp
@@ -667,6 +667,7 @@ bool ZSignAsset::Init(const string &strSignerCertFile, const string &strSignerPK
 	{
 		if (jvProv.readPList(strProvContent))
 		{
+            m_strApplicationId = jvProv["Entitlements"]["application-identifier"].asCString();
 			m_strTeamId = jvProv["TeamIdentifier"][0].asCString();
 			if (m_strEntitlementsData.empty())
 			{
@@ -695,6 +696,12 @@ bool ZSignAsset::Init(const string &strSignerCertFile, const string &strSignerPK
 			{
 				BIO_reset(bioPKey);
 				PKCS12 *p12 = d2i_PKCS12_bio(bioPKey, NULL);
+				if (!p12)
+				{
+					FILE *p12_file = fopen(strSignerPKeyFile.c_str(), "rb");
+					d2i_PKCS12_fp(p12_file, &p12);
+					fclose(p12_file);
+				}
 				if (NULL != p12)
 				{
 					if (0 == PKCS12_parse(p12, strPassword.c_str(), &evpPKey, &x509Cert, NULL))
diff --git a/openssl.h b/openssl.h
index 8e4b183..74c17f5 100644
--- a/openssl.h
+++ b/openssl.h
@@ -20,6 +20,7 @@ public:
 	string m_strSubjectCN;
 	string m_strProvisionData;
 	string m_strEntitlementsData;
+    string m_strApplicationId;
 
 private:
 	void *m_evpPKey;
